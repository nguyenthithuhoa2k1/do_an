<?php

namespace App\Http\Controllers\frontend;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests\ErrorProductRequest;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use App\Models\Frontend\Product;
use App\Models\Brand;
use App\Models\Category;
use Image;


class MyProductController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        
        $dataProduct = Product::paginate(5); 
        return view('frontend.account.product.MyProduct',compact('dataProduct'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $dataCategory = Category::all();
        $dataBrand = Brand::all();
        return view('frontend.account.product.AddProduct',compact('dataCategory','dataBrand'));
    }

     public function insert(ErrorProductRequest $request)
    {
        $id_user = Auth::id();
        $dataProduct = new Product;
        $dataProduct->title=$request->title;
        $dataProduct->price=$request->price;
        $dataProduct->id_category=$request->category;
        $dataProduct->id_brand=$request->brand;
        $dataProduct->status=$request->status;
        $dataProduct->sale=$request->sale;
        $dataProduct->company=$request->company;
        $dataProduct->detail=$request->detail;
        $dataProduct->id_user = $id_user;
        $files = $request->image;
        $data = [];
        if(isset($files)) {
            $countImage = count($files);
            if($countImage > 3){
                return redirect()->back()->withErrors('Add file > 3');
            }

            foreach($files as $image)
            {
                $name = $image->getClientOriginalName();
                $name_2 = "2".$image->getClientOriginalName();
                $name_3 = "3".$image->getClientOriginalName();
                
                $path = public_path('upload/product/' . $name);
                $path2 = public_path('upload/product/' . $name_2);
                $path3 = public_path('upload/product/' . $name_3);

                Image::make($image->getRealPath())->save($path);
                Image::make($image->getRealPath())->resize(85, 84)->save($path2);
                Image::make($image->getRealPath())->resize(329, 380)->save($path3);
                
                $data[] = $name;
            }
        }
        $dataProduct->image = json_encode($data);

        if($dataProduct->save()){
            return redirect()->route('myproduct')->with('success','Add success');
        }else{
                return redirect()->back()->withErrors('Add errors');
        }
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $dataCategory = Category::all();
        $dataBrand = Brand::all();
        $dataProduct = Product::where('id_product',$id)->get();
        return view('frontend.account.product.EditProduct',compact('dataProduct','dataCategory','dataBrand'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $data=[];
        $product = Product::where('id_product',$id)->first();
        $data = request()->all();
        $data = request()->except(['_token']);
        $id_user= Auth::id();
        $data['id_user']=$id_user;
        $files = $request->image ? $request->image : [];
        foreach($files as $image)
        {
            $listImageNew[] = $image->getClientOriginalName();
        }


        $filesRemove = $request->listImageRemove;
        $filesOld = json_decode($product->image);
        if($filesRemove) {
            $filesOld = array_diff($filesOld, $filesRemove);
        }

        $filesNew =[];
        $filesNew = array_unique(array_merge($filesOld,$listImageNew));

        $countImage = count($filesNew);
        if($countImage > 3){
            return redirect()->back()->withErrors('Add file > 3');
        }

        if(isset($files)) {
            foreach($files as $image)
            {
                $name = $image->getClientOriginalName();
                $name_2 = "2".$image->getClientOriginalName();
                $name_3 = "3".$image->getClientOriginalName();
                
                $path = public_path('upload/product/' . $name);
                $path2 = public_path('upload/product/' . $name_2);
                $path3 = public_path('upload/product/' . $name_3);

                Image::make($image->getRealPath())->save($path);
                Image::make($image->getRealPath())->resize(85, 84)->save($path2);
                Image::make($image->getRealPath())->resize(329, 380)->save($path3);
            }
        }

        $data['image'] = json_encode($filesNew);


        unset($data['listImageRemove']);

        if(Product::where('id_product',$id)->update($data)){
            return redirect()->route('myproduct')->with('success',('update success'));
        }else{
            return redirect()->back()->withErrors('Update error');
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        if(Product::where('id_product',$id)->delete()){
            return redirect()->back()->with('success','delete success');
        }else{
            return redirect()->back()->withErrors('delete errors');
        }
        
        
    }
}














































































































































































































































       
       



































































































      



















































































































































































































































































































































































































































































































































































































































            
       



















































































































































































































































































































































































































































































































































































































































































































































































































































        
